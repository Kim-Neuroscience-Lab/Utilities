# src/core/models/animal.py

# Standard Library Imports
from typing import Optional, List, Dict, Any, Union
from uuid import uuid4, UUID
from logging import Logger

# Third Party Imports
from pydantic import BaseModel, Field

# Internal Imports
from src.core.models.region import Region
from src.utils.logging import get_logger
from src.core.exceptions.models.animal import *

# Initialize logger
logger: Logger = get_logger(__name__)


class Animal(BaseModel):
    id: Union[UUID, str, int] = Field(
        default_factory=uuid4,
        description="The unique identifier for the animal which is generated by the system.",
    )
    animal_id: Optional[str] = Field(
        default=None, description="The ID of the animal.", examples=["M042", "M137"]
    )
    age: Optional[str] = Field(
        default=None,
        description="The age of the animal.",
        examples=["p3", "p12", "p20", "adult"],
    )
    regions: Dict[str, Region] = Field(
        default_factory=dict, description="The cortical regions of the animal."
    )
    metadata: Optional[Dict[str, Any]] = Field(
        default=None, description="The metadata of the animal."
    )

    def area_of_region(self, region_id: str) -> int:
        """Get the area of a specified region.

        Args:
            _id (Union[UUID, str, int]): The ID of the region.

        Returns:
            int: The area of the region.
        """
        if self.regions is None:
            logger.warning(f"No regions found for animal {self.animal_id}")
            return 0
        if region_id not in self.regions:
            logger.warning(f"Region {region_id} not found for animal {self.animal_id}")
            return 0
        return self.regions[region_id].area

    def get_region_by_id(self, region_id: str) -> Union[Region, None]:
        """Get a region from the animal by its ID.

        Args:
            region_id (Union[UUID, str, int]): The ID of the region.

        Returns:
            Region: The region.
        """
        if self.regions is None:
            raise NoRegionsFoundError()
        try:
            return self.regions[region_id]
        except KeyError:
            raise RegionNotFoundError(region_id)

    def add_region(self, region: Region) -> None:
        """Add a region to the animal.

        Args:
            region (Region): The region to add.
        """
        if region.region_id in self.regions:
            raise RegionAlreadyExistsError(region.region_id)
        self.regions[region.region_id] = region

    def remove_region(self, region_id: Union[Region, str]) -> None:
        """Remove a region from the animal.

        Args:
            region_id (Union[Region, str]): The ID of the region to remove.
        """
        if isinstance(region_id, Region):
            region_id = region_id.region_id
        if region_id not in self.regions.keys():
            raise RegionNotFoundError(region_id)
        del self.regions[region_id]
