# src/core/models/segment.py
"""
This module contains the Segment model which is used to represent a segment of tissue imaging data.

Classes:
    Segment: A segment of tissue imaging data.
"""

# Standard Library Imports
from uuid import uuid4, UUID
from typing import Optional, List, Dict, Any, Union
from logging import Logger

# Third Party Imports
from pydantic import BaseModel, Field

# Internal Imports
from src.utils.logging import get_logger

# Initialize logger
logger: Logger = get_logger(__name__)


class Segment(BaseModel):
    """A segment of tissue imaging data.

    Attributes:
        id: The unique identifier for the segment which is generated by the system.
        segment_id: The ID of the segment.
        properties: The properties of the segment.
        metadata: The metadata of the segment.
    """

    id: Union[UUID, str, int] = Field(
        default_factory=uuid4,
        description="The unique identifier for the segment which is generated by the system.",
    )
    segment_id: str = Field(
        description="The ID of the segment.",
        examples=["S042", "S137"],
    )
    properties: Dict[str, Any] = Field(
        default={"area": None},
        description="The properties of the segment.",
    )
    metadata: Optional[Dict[str, Any]] = Field(
        default=None, description="The metadata of the segment."
    )

    @property
    def area(self) -> int:
        """Get the area of the segment.

        Returns:
            int: The area of the segment.
        """
        if self.properties["area"] is None:
            logger.warning(f"Area is not set for segment {self.segment_id}")
            return 0
        return self.properties["area"]

    @area.setter
    def area(self, value: int) -> None:
        """Set the area of the segment.

        Args:
            value (int): The area of the segment.

        Returns:
            None
        """
        self.properties["area"] = value
