# src/core/models/region.py

# Standard Library Imports
from uuid import uuid4, UUID
from typing import Optional, List, Dict, Any, Union
from logging import Logger

# Third Party Imports
from pydantic import BaseModel, Field

# Internal Imports
from src.core.models.segment import Segment
from src.utils.logging import get_logger
from Utilities.src.core.exceptions.models.region import *

# Initialize logger
logger: Logger = get_logger(__name__)


class Region(BaseModel):
    """A region of tissue imaging data.

    This model is used to represent a region of tissue imaging data.
    It is responsible for storing the segments associated with the region.

    Attributes:
        id: The unique identifier for the region which is generated by the system.
        region_id: The ID of the region.
        roi: The ROI name.
        segments: The segments associated with the region.
        metadata: The metadata of the region.
    """

    id: Union[UUID, str, int] = Field(
        default_factory=uuid4,
        description="The unique identifier for the region which is generated by the system.",
    )
    region_id: str = Field(
        default="",
        description="The ID of the region.",
        examples=["R042", "R137"],
    )
    roi: Optional[str] = Field(
        default=None,
        description="The ROI name.",
        examples=[
            "RSPagl",
            "RSPd",
            "RSPv",
            "VISa",
            "VISal",
            "VISam",
            "VISl",
            "VISli",
            "VISp",
            "VISpl",
            "VISpm",
            "VISpor",
            "VISrl",
        ],
    )
    segments: Optional[Dict[str, Segment]] = Field(
        default=None, description="The segments associated with the region."
    )
    properties: Optional[Dict[str, Any]] = Field(
        default=None, description="The properties of the region."
    )
    metadata: Optional[Dict[str, Any]] = Field(
        default=None, description="The metadata of the region."
    )

    @property
    def area(self) -> int:
        """Get the total area of the segments associated with the region.

        Returns:
            int: The total area of the segments associated with the region.
        """
        if self.segments is None:
            return 0
        return sum(segment.area for segment in self.segments.values())

    def get_segment_by_id(self, segment_id: str) -> Segment:
        """Get a segment from the region by its ID.

        Args:
            segment_id (str): The ID of the segment to get.
        """
        if self.segments is None:
            raise NoSegmentsFoundError()
        try:
            return self.segments[segment_id]
        except KeyError:
            raise SegmentNotFoundError(segment_id)
